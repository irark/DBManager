@typeparam TItem
<div class="dropdown custom-dropdown">
    <button data-display="static" class="btn dropdown-toggle @(IsDisabled ? "disabled" : "") @ButtonAdditionalClass" data-toggle="dropdown"
            type="button" @onclick="e => this.show = !this.show"
            style="@(IgnoreMinWidth ? "min-width: unset" : string.Empty)"
            aria-haspopup="true" aria-expanded="false">
        @if (!string.IsNullOrEmpty(IconSrc))
        {
            <div class="dropdown-image-container">
                <img class="va-middle" src="@IconSrc" width="16" height="16" alt=""/>
            </div>
        }
        <div class="d-inline-block va-middle dropdown-label-text">
            @SelectedOne
        </div>
        @if (ShowLabel)
        {
            <span class="custom-dropdown__tip"> @Tip</span>
        }
    </button>
    @if (!IsDisabled)
    {
        <CascadingValue name="Dropdown" Value="@this">
            <div class="dropdown-menu @(show ? "show" : "")">
                <div class="dropdown-wrapper @Size" >
                @ChildContent 
                </div>
            </div>
        </CascadingValue>
    }
</div>

@code
{
    [Parameter]public RenderFragment InitialTip { get; set; }
    [Parameter]public RenderFragment SelectedOneItem { get; set; }

    [Parameter]public RenderFragment ChildContent { get; set; }

    [Parameter]public EventCallback<TItem> OnSelected { get; set; }
    [Parameter] public  bool IsDisabled { get; set; }

    [Parameter] public bool ShowLabel { get; set; } = true;
    [Parameter] public string ButtonAdditionalClass { get; set; }
    [Parameter] public string IconSrc { get; set; }
    [Parameter] public bool IgnoreMinWidth { get; set; } = true;

    [Parameter]public string Size { get; set; } = "small";

    private bool show = true;
    private RenderFragment Tip;
    private RenderFragment SelectedOne;

    protected override void OnParametersSet()
    {
        this.Tip = InitialTip;
        this.SelectedOne = SelectedOneItem;
        this.show = false;
    }

    public async Task HandleSelect(TItem item, RenderFragment<TItem> contentFragment)
    {
        this.SelectedOne = contentFragment.Invoke(item);
        this.show = true;
        StateHasChanged();
        await this.OnSelected.InvokeAsync(item);
    }
}